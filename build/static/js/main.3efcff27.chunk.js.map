{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["webcam","URLss","machine","initial","states","on","next","loadingModel","modelReady","imageReady","identifying","complete","showResults","App","useState","results","setResults","model","setModel","useReducer","state","event","appState","dispatch","loadModel","a","tmImage","identify","update","predict","canvas","console","log","reset","window","location","reload","loop","requestAnimationFrame","actionButton","action","text","setup","play","document","getElementById","appendChild","map","className","probability","toFixed","onClick","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"iRAIoBA,E,6FADdC,EAAQ,4DAGRC,EAAU,CACdC,QAAS,UACTC,OAAQ,CACND,QAAS,CAAEE,GAAI,CAAEC,KAAM,iBACvBC,aAAc,CAAEF,GAAI,CAAEC,KAAM,eAC5BE,WAAY,CAAEH,GAAI,CAAEC,KAAM,eAC1BG,WAAY,CAAEJ,GAAI,CAAEC,KAAM,gBAC1BI,YAAa,CAAEL,GAAI,CAAEC,KAAM,aAC3BK,SAAU,CAAEN,GAAI,CAAEC,KAAM,cAAgBM,aAAa,KAwF1CC,MAlFf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAEaF,mBAAS,MAFtB,mBAENG,EAFM,KAECC,EAFD,OAOgBC,sBAHb,SAACC,EAAOC,GAAR,OACdnB,EAAQE,OAAOgB,GAAOf,GAAGgB,IAAUnB,EAAQC,UAEID,EAAQC,SAP5C,mBAONmB,EAPM,KAOIC,EAPJ,KAQPjB,EAAO,kBAAMiB,EAAS,SAEtBC,EAAS,uCAAG,4BAAAC,EAAA,6DAChBnB,IACiBL,EAAQ,aACLA,EAAQ,gBAHZ,SAKIyB,OAHHzB,sEACGA,0EAHJ,OAKVgB,EALU,OAMhBC,EAASD,GACTX,IAPgB,2CAAH,qDASTqB,EAAQ,uCAAG,4BAAAF,EAAA,6DAChBnB,IACAN,EAAO4B,SAFS,SAGOX,EAAMY,QAAQ7B,EAAO8B,QAH5B,OAGTf,EAHS,OAIfgB,QAAQC,IAAI,cACZhB,EAAWD,GACXT,IANe,2CAAH,qDASR2B,EAAK,uCAAG,sBAAAR,EAAA,sDACZT,EAAW,IACVkB,OAAOC,SAASC,QAAO,GACxB9B,IAHY,2CAAH,qDAKL+B,EAAI,uCAAG,sBAAAZ,EAAA,sDACZzB,EAAO4B,SACPM,OAAOI,sBAAsBD,GAFjB,2CAAH,qDAgBCE,EAAe,CACnBpC,QAAS,CAAEqC,OAAQhB,EAAWiB,KAAM,cACpClC,aAAc,CAAEkC,KAAM,oBACtBjC,WAAY,CAAEgC,OAdT,uCAAG,sBAAAf,EAAA,6DACD,EACTzB,EAAS,IAAI0B,SAAe,IAAK,IADxB,MADC,SAGJ1B,EAAO0C,QAHH,uBAIJ1C,EAAO2C,OAJH,OAKVT,OAAOI,sBAAsBD,GAC7BO,SAASC,eAAe,oBAAoBC,YAAY9C,EAAO8B,QAC9Cc,SAASC,eAAe,mBACzCvC,IARU,4CAAH,qDAcyBmC,KAAM,gBACpChC,WAAY,CAAE+B,OAAQb,EAAUc,KAAM,kBACtC/B,YAAa,CAAE+B,KAAM,kBACrB9B,SAAU,CAAE6B,OAAQP,EAAOQ,KAAM,UAIhC7B,EAAgBV,EAAQE,OAAOkB,GAA/BV,YAER,OACE,gCACGA,GACC,6BACGG,EAAQgC,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,YAAd,OACX,uCAAwBD,EAAxB,eAAsD,IAAdC,GAAmBC,QACzD,KADOF,QAMf,wBAAQG,QAASZ,EAAajB,GAAUkB,QAAW,aAAnD,SACGD,EAAajB,GAAUmB,OAGhC,qBAAKW,GAAG,qBACR,qBAAKA,GAAG,wBCrFOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpB,SAASC,eAAe,SAM1BQ,M","file":"static/js/main.3efcff27.chunk.js","sourcesContent":["import React, { useState, useRef, useReducer } from \"react\";\nimport * as tmImage from '@teachablemachine/image';\n\nconst URLss = \"https://teachablemachine.withgoogle.com/models/uDVea6lIg/\";\nlet labelContainer, webcam;\n\nconst machine = {\n  initial: \"initial\",\n  states: {\n    initial: { on: { next: \"loadingModel\" } },\n    loadingModel: { on: { next: \"modelReady\" } },\n    modelReady: { on: { next: \"imageReady\" } },\n    imageReady: { on: { next: \"identifying\" } },\n    identifying: { on: { next: \"complete\" } },\n    complete: { on: { next: \"modelReady\" }, showResults: true }\n    \n  }\n};\n\n\nfunction App() {\n  const [results, setResults] = useState([]);\n  const [model, setModel] = useState(null);\n  \n  const reducer = (state, event) =>\n    machine.states[state].on[event] || machine.initial;\n\n  const [appState, dispatch] = useReducer(reducer, machine.initial);\n  const next = () => dispatch(\"next\");\n\n  const loadModel = async () => {\n    next();\n    const modelURL = URLss + \"model.json\";\n    const metadataURL = URLss + \"metadata.json\";\n\n    const model = await tmImage.load(modelURL, metadataURL);\n    setModel(model);\n    next();\n  };\n  const identify = async () => {\n   next()\n   webcam.update(); \n    const results = await model.predict(webcam.canvas);\n    console.log(\"prediction\");\n    setResults(results);\n    next();\n  };\n\n  const reset = async () => {\n    setResults([]);\n     window.location.reload(false);\n    next();\n  };\n  const loop = async () => {\n   webcam.update(); // update the webcam frame\n   window.requestAnimationFrame(loop);\n}\n\n  const upload = async () => {\n   const flip = true; // whether to flip the webcam\n       webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip\n       await webcam.setup(); // request access to the webcam\n       await webcam.play();\n       window.requestAnimationFrame(loop);\n       document.getElementById(\"webcam-container\").appendChild(webcam.canvas);\n       labelContainer = document.getElementById(\"label-container\");\n       next();\n      };\n\n       const actionButton = {\n         initial: { action: loadModel, text: \"Load Model\" },\n         loadingModel: { text: \"Loading Model...\" },\n         modelReady: { action: upload, text: \"Upload Image\" },\n         imageReady: { action: identify, text: \"Identify Breed\" },\n         identifying: { text: \"Identifying...\" },\n         complete: { action: reset, text: \"Reset\" }\n       };\n     \n\n  const { showResults } = machine.states[appState];\n\n  return (\n    <div>\n      {showResults && (\n        <ul>\n          {results.map(({ className, probability }) => (\n            <li key={className}>{`${className}: %${(probability * 100).toFixed(\n              2\n            )}`}</li>\n          ))}\n        </ul>\n      )}\n      <button onClick={actionButton[appState].action || (() => {})}>\n        {actionButton[appState].text}\n      </button>\n      \n<div id=\"webcam-container\"></div>\n<div id=\"label-container\"></div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}